<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:p="http://www.springframework.org/schema/p"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation=" 
           http://www.springframework.org/schema/beans 
           http://www.springframework.org/schema/beans/spring-beans-3.0.xsd 
           http://www.springframework.org/schema/context 
           http://www.springframework.org/schema/context/spring-context-3.0.xsd
           http://www.springframework.org/schema/mvc 
           http://www.springframework.org/schema/mvc/spring-mvc-3.0.xsd" default-autowire="byName">
	
	<!-- Handles HTTP GET requests for /resources/** by efficiently serving up static resources in the ${webappRoot}/resources/ directory -->
	<mvc:resources mapping="/images/**" location="/images/" />
    <mvc:resources mapping="/scripts/**" location="/scripts/" />
    <mvc:resources mapping="/css/**" location="/css/" />
	<mvc:resources mapping="/js/**" location="/js/" />
	<mvc:resources mapping="/html/**" location="/html/" />
    <mvc:resources mapping="/res/**" location="/res/" />
    <mvc:resources mapping="/thirdparty/**" location="/thirdparty/" />
    <mvc:resources mapping="/d/**" location="/d/" />
    <mvc:resources mapping="/a_css/**" location="/a_css/" />
    <mvc:resources mapping="/m_css/**" location="/m_css/" />
    <mvc:resources mapping="/*.html" location="/*.htm" />  
   <mvc:resources mapping="/tb/**" location="/tb/" />
    
	<!--启动注解驱动的Spring MVC功能，注册请求URL和注解POJO类方法的映射-->	
	<!-- Configures the @Controller programming model 必须加上这个，不然请求controller时会出现no mapping url错误-->
	<mvc:annotation-driven />
	
	<!-- 激活那些已经在spring容器里注册过的bean（无论是通过xml的方式还是通过package sanning的方式）上面的注解 -->
	<context:annotation-config />
	
	<!-- 自动将带有@component,@service,@Repository等注解的对象注册到spring容器中 -->
	<context:component-scan base-package="com.web.app.controller,com.zyz.controller" />

	<bean id="multipartResolver" class="org.springframework.web.multipart.commons.CommonsMultipartResolver"/>

	<bean class="org.springframework.web.servlet.mvc.annotation.DefaultAnnotationHandlerMapping">
        <property name="interceptors">
            <list>
                <bean class="com.web.app.util.MyHandlerInterceptor"/>
            </list>
        </property>
	</bean>

	<bean class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
	    <property name="cacheSeconds" value="0" />
	    <property name="webBindingInitializer">
	        <bean class="com.web.app.util.MyWebBinding" />
	    </property>
	    <!-- json数据的转换 -->
	    <property name="messageConverters">
	    	<list>
	    		<bean class="org.springframework.http.converter.json.MappingJacksonHttpMessageConverter"></bean>
	    	</list>
	    </property>
	</bean>
			

	<!-- Resolves views selected for rendering by @Controllers to .jsp resources in the /WEB-INF/jsp directory -->
	<bean id="webExceptionResolver" class="org.springframework.web.servlet.handler.SimpleMappingExceptionResolver">     
      <property name="defaultErrorView" value="error" />     
    </bean>
	<bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<property name="prefix" value="/WEB-INF/jsp/"></property>
		<property name="suffix" value=".jsp"></property>
	</bean>
<mvc:view-controller path="/" view-name="login"/>	

	
	  <!-- enable component scanning (beware that this does not enable mapper scanning!) -->    
    <context:component-scan base-package="com.zyz.service,com.web.app.service,com.web.app.pub,com.zyz.datasource1.service" />
		<!-- define the SqlSessionFactory -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="configLocation" value="/WEB-INF/config/mybatisCfg.xml" />
        <property name="typeAliasesPackage" value="com.web.app.domain,com.zyz.domain,com.web.app.pub" />
    </bean>
     <!-- scan for mappers and let them be autowired -->
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.web.app.persistence,com.zyz.persistence,com.web.app.pub" />
    </bean>
    
    
       <bean id="sqlSessionFactory1" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource1" />
        <property name="typeAliasesPackage" value="com.zyz.domain" />
    </bean>
    
     <bean name="mapperScannerConfigurer1" class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.zyz.datasource1.persistence" />
         <property name="sqlSessionFactory" ref="sqlSessionFactory1"></property>  
    </bean>
    
    <bean id="springBeanUtils" class="com.web.app.util.SpringBeanUtils"/>
    <bean id="initDictData" class="com.web.app.util.InitDictData"/>
	   <import resource="scheduling.xml"/>
</beans>